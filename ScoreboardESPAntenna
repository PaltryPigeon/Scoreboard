#include <WiFi.h>
#include <esp_now.h>

uint8_t slaveAddress[] = {0xEC, 0xE3, 0x34, 0x19, 0xE7, 0x14}; 
//uint8_t slaveAddress[] = {0xC4, 0xDE, 0xE2, 0x9C, 0xA5, 0x34}; First Version


// Structure to hold the scoreboard data
typedef struct struct_message {
  char payload[250]; // Increase if needed
} struct_message;

struct_message outgoingData;

// Callback when data is sent
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  Serial.begin(115200);

  // WiFi setup
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(); // Not connecting to a router

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_send_cb(onDataSent);

  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, slaveAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (!esp_now_add_peer(&peerInfo)) {
    Serial.println("Peer added successfully");
  } else {
    Serial.println("Failed to add peer");
  }
}

void loop() {
  if (Serial.available()) {
    String line = Serial.readStringUntil('\n');
    line.trim();
    if (line.length() > 0 && line.length() < sizeof(outgoingData.payload)) {
      line.toCharArray(outgoingData.payload, sizeof(outgoingData.payload));
      esp_now_send(slaveAddress, (uint8_t *)&outgoingData, sizeof(outgoingData));
    }
  }
}
